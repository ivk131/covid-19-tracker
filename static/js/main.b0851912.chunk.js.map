{"version":3,"sources":["InfoBox.js","LineGraph.js","Table.js","Util.js","Map.js","App.js","index.js"],"names":["InfoBox","title","cases","total","active","isRed","props","console","log","Card","onClick","className","CardContent","Typography","color","gutterBottom","options","legend","display","elements","point","radius","maintainAspectRation","tooltips","mode","intersect","callbacks","label","tooltipItem","data","numeral","value","format","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","LineGraph","casesType","useState","setData","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","useEffect","a","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","Table","countries","map","country","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","sortData","sortedData","sort","b","prettyPrintStat","stat","Map","center","zoom","TileLayer","url","attribution","Circle","countryInfo","lat","long","fillColor","fillOpacity","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","App","setInputCountry","setCountryInfo","setCountries","mapCountries","setMapCountries","tableData","setTableData","setCasesType","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","name","iso2","getCountriesData","onCountryChange","e","countryCode","target","FormControl","Select","variant","onChange","MenuItem","todayCases","todayRecovered","todayDeaths","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b0851912.chunk.js","sourcesContent":["import React from \"react\";\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\nimport \"./InfoBox.css\";\n\nfunction InfoBox({ title, cases, total, active, isRed, ...props }) {\n  console.log(title, active);\n  return (\n    <Card\n      onClick={props.onClick}\n      className={`infoBox ${active && \"infoBox--selected\"} ${\n        isRed && \"infoBox--red\"\n      }`}>\n      <CardContent>\n        <Typography color='textSecondary' gutterBottom>\n          {title}\n        </Typography>\n        <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>\n          {cases}\n        </h2>\n\n        <Typography className='infoBox__total' color='textSecondary'>\n          {total} Total\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default InfoBox;\n","import React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport numeral from \"numeral\";\n\nconst options = {\n  legend: {\n    display: false,\n  },\n  elements: {\n    point: {\n      radius: 0,\n    },\n  },\n  maintainAspectRation: false,\n  tooltips: {\n    mode: \"index\",\n    intersect: false,\n    callbacks: {\n      label: function (tooltipItem, data) {\n        return numeral(tooltipItem.value).format(\"+0,0\");\n      },\n    },\n  },\n  scales: {\n    xAxes: [\n      {\n        type: \"time\",\n        time: {\n          format: \"MM/DD/YY\",\n          tooltipFormat: \"ll\",\n        },\n      },\n    ],\n\n    yAxes: [\n      {\n        gridLines: {\n          display: false,\n        },\n        ticks: {\n          //include the dollar sign in the ticks\n          callback: function (value, index, values) {\n            return numeral(value).format(\"0a\");\n          },\n        },\n      },\n    ],\n  },\n};\n\nconst LineGraph = ({ casesType = \"cases\" }) => {\n  const [data, setData] = useState({});\n\n  const buildChartData = (data, casesType = \"cases\") => {\n    const chartData = [];\n    let lastDataPoint;\n    for (let date in data.cases) {\n      if (lastDataPoint) {\n        const newDataPoint = {\n          x: date,\n          y: data[casesType][date] - lastDataPoint,\n        };\n        chartData.push(newDataPoint);\n      }\n      lastDataPoint = data[casesType][date];\n    }\n\n    return chartData;\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\n        .then((response) => {\n          return response.json();\n        })\n        .then((data) => {\n          let chartData = buildChartData(data, \"cases\");\n          setData(chartData);\n          console.log(chartData);\n        });\n    };\n    fetchData();\n  }, []);\n\n  return (\n    <div>\n      {data?.length > 0 && (\n        <Line\n          data={{\n            datasets: [\n              {\n                backgroundColor: \"rgba(204,16,52,0.5)\",\n                borderColor: \"#cc1034\",\n                data: data,\n              },\n            ],\n          }}\n          options={options}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default LineGraph;\n","import React from \"react\";\nimport \"./Table.css\";\nimport numeral from \"numeral\";\n\nfunction Table({ countries }) {\n  return (\n    <div className='table'>\n      {countries.map((country) => (\n        <tr>\n          <td>{country.country}</td>\n          <td>\n            <strong>{numeral(country.cases).format(\"0,0\")}</strong>\n          </td>\n        </tr>\n      ))}\n    </div>\n  );\n}\n\nexport default Table;\n","import React from \"react\";\nimport numeral from \"numeral\";\nimport { Circle, Popup } from \"react-leaflet\";\n\nconst casesTypeColors = {\n  cases: {\n    hex: \"#CC1034\",\n    rgb: \"rgb(204, 16, 52)\",\n    half_op: \"rgba(204, 16, 52, 0.5)\",\n    multiplier: 800,\n  },\n  recovered: {\n    hex: \"#7dd71d\",\n    rgb: \"rgb(125, 215, 29)\",\n    half_op: \"rgba(125, 215, 29, 0.5)\",\n    multiplier: 1200,\n  },\n  deaths: {\n    hex: \"#fb4443\",\n    rgb: \"rgb(251, 68, 67)\",\n    half_op: \"rgba(251, 68, 67, 0.5)\",\n    multiplier: 2000,\n  },\n};\n\nexport const sortData = (data) => {\n  let sortedData = [...data];\n  sortedData.sort((a, b) => {\n    if (a.cases > b.cases) {\n      return -1;\n    } else {\n      return 1;\n    }\n  });\n  return sortedData;\n};\n\nexport const prettyPrintStat = (stat) =>\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\n\nexport const showDataOnMap = (data, casesType = \"cases\") =>\n  data.map((country) => (\n    <Circle\n      center={[country.countryInfo.lat, country.countryInfo.long]}\n      color={casesTypeColors[casesType].hex}\n      fillColor={casesTypeColors[casesType].hex}\n      fillOpacity={0.4}\n      radius={\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\n      }>\n      <Popup>\n        <div className='info-container'>\n          <div\n            className='info-flag'\n            style={{\n              backgroundImage: `url(${country.countryInfo.flag})`,\n            }}></div>\n          <div className='info-name'>{country.country}</div>\n          <div className='info-confirmed'>\n            Cases: {numeral(country.cases).format(\"0,0\")}\n          </div>\n          <div className='info-recovered'>\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\n          </div>\n          <div className='info-deaths'>\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\n          </div>\n        </div>\n      </Popup>\n    </Circle>\n  ));\n","import React from \"react\";\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\nimport \"./Map.css\";\nimport { showDataOnMap } from \"./Util\";\n\nfunction Map({ countries, casesType, center, zoom }) {\n  return (\n    <div className='map'>\n      <LeafletMap center={center} zoom={zoom}>\n        <TileLayer\n          url='https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png'\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        />\n        {showDataOnMap(countries, casesType)}\n      </LeafletMap>\n    </div>\n  );\n}\n\nexport default Map;\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport {\n  MenuItem,\n  FormControl,\n  Select,\n  Card,\n  CardContent,\n} from \"@material-ui/core\";\nimport InfoBox from \"./InfoBox\";\nimport LineGraph from \"./LineGraph\";\nimport Table from \"./Table\";\nimport { sortData, prettyPrintStat } from \"./Util\";\nimport numeral from \"numeral\";\nimport Map from \"./Map\";\nimport \"leaflet/dist/leaflet.css\";\n\nconst App = () => {\n  const [country, setInputCountry] = useState(\"worldwide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [countries, setCountries] = useState([]);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [tableData, setTableData] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n  const [mapZoom, setMapZoom] = useState(3);\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then((response) => response.json())\n      .then((data) => {\n        setCountryInfo(data);\n      });\n  }, []);\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => ({\n            name: country.country,\n            value: country.countryInfo.iso2,\n          }));\n          let sortedData = sortData(data);\n          setCountries(countries);\n          setMapCountries(data);\n          setTableData(sortedData);\n        });\n    };\n\n    getCountriesData();\n  }, []);\n\n  console.log(casesType);\n\n  const onCountryChange = async (e) => {\n    const countryCode = e.target.value;\n\n    const url =\n      countryCode === \"worldwide\"\n        ? \"https://disease.sh/v3/covid-19/all\"\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n    await fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        setInputCountry(countryCode);\n        setCountryInfo(data);\n        setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        setMapZoom(4);\n      });\n  };\n\n  return (\n    <div className='app'>\n      <div className='app__left'>\n        <div className='app__header'>\n          <h1>COVID-19 Tracker</h1>\n          <FormControl className='app__dropdown'>\n            <Select\n              variant='outlined'\n              value={country}\n              onChange={onCountryChange}>\n              <MenuItem value='worldwide'>Worldwide</MenuItem>\n              {countries.map((country) => (\n                <MenuItem value={country.value}>{country.name}</MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n        <div className='app__stats'>\n          <InfoBox\n            onClick={(e) => setCasesType(\"cases\")}\n            title='Coronavirus Cases'\n            isRed\n            active={casesType === \"cases\"}\n            cases={prettyPrintStat(countryInfo.todayCases)}\n            total={numeral(countryInfo.cases).format(\"0.0a\")}\n          />\n          <InfoBox\n            onClick={(e) => setCasesType(\"recovered\")}\n            title='Recovered'\n            active={casesType === \"recovered\"}\n            cases={prettyPrintStat(countryInfo.todayRecovered)}\n            total={numeral(countryInfo.recovered).format(\"0.0a\")}\n          />\n          <InfoBox\n            onClick={(e) => setCasesType(\"deaths\")}\n            title='Deaths'\n            isRed\n            active={casesType === \"deaths\"}\n            cases={prettyPrintStat(countryInfo.todayDeaths)}\n            total={numeral(countryInfo.deaths).format(\"0.0a\")}\n          />\n        </div>\n        <Map\n          countries={mapCountries}\n          casesType={casesType}\n          center={mapCenter}\n          zoom={mapZoom}\n        />\n      </div>\n      <Card className='app__right'>\n        <CardContent>\n          <div className='app__information'>\n            <h3>Live Cases by Country</h3>\n            <Table countries={tableData} />\n            <h3>Worldwide new {casesType}</h3>\n            <LineGraph casesType={casesType} />\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}